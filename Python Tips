记录各种Python的api和操作

string.zfill(width)  返回指定长度的字符串，原字符串右对齐，前面填充0
例如：string='1001'
string = string.zfill(10)
string=='0000001001'


zip([iterable, ...])
返回turple列表

>>>a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)     # 打包为元组的列表
[(1, 4), (2, 5), (3, 6)]
>>> zip(a,c)              # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]
>>> zip(*zipped)          # 与 zip 相反，可理解为解压，返回二维矩阵式
[(1, 2, 3), (4, 5, 6)]

为dict提供默认值
collections.defaultdict(类型（比如int，list等，也可以接受不带参数的可调用函数）)

collections.deque()
双向队列，有popleft()出队方法和append()入队方法

all()
all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否不为 0、''、False 或者 iterable 为空，
如果是返回 True，否则返回 False。

yield关键字




二维list转一维list的几种方法
方法一：适用于二维list
a=[[1,2,3],[4,5,6]]
sum(a,[])

方法二
import itertools
a = [[1,2,3],[4,5,6], [7], [8,9]]
out = list(itertools.chain.from_iterable(a))

方法三：适用于任意深度的嵌套（递归）
def flat(l):
    for k in l:
        if not isinstance(k, (list, tuple)):
            yield k
        else:
            yield from flat(k)


strings.count('string')
对strings中的某个string进行计数

math.sqrt
开根号计算

python中变量仅仅是对象的标签
例如：
>>> import copy
>>> a = [1, 2, 3]
>>> b = a
>>> c = copy.deepcopy(a)
>>> a.append(4)
>>> print a
[1, 2, 3, 4]
>>> print b
[1, 2, 3, 4]
>>> print c
[1, 2, 3]

>>> import copy
>>> a = [[10], 20]
>>> b = a[:]
>>> c = list(a)
>>> d = a * 1
>>> e = copy.copy(a)
>>> f = copy.deepcopy(a)
>>> a.append(21)
>>> a[0].append(11)
>>> print id(a), a
30553152 [[10, 11], 20, 21]
>>> print id(b), b
44969816 [[10, 11], 20]
>>> print id(c), c
44855664 [[10, 11], 20]
>>> print id(d), d
44971832 [[10, 11], 20]
>>> print id(e), e
44833088 [[10, 11], 20]
>>> print id(f), f
44834648 [[10], 20]


set() 无序不重复元素集，可以用于去除重复元素和关系测试

>>> x = set('spam')
>>> y = set(['h','a','m'])
>>> x, y
(set(['a', 'p', 's', 'm']), set(['a', 'h', 'm']))

>>> x & y # 交集
set(['a', 'm'])

>>> x | y # 并集
set(['a', 'p', 's', 'h', 'm'])

>>> x - y # 差集
set(['p', 's'])

>>> x ^ y # 对称差集
set(['p', 's', 'h'])

A和B是list
#求交集的两种方式
retA = [i for i in listA if i in listB]
retB = list(set(listA).intersection(set(listB)))

#求并集
retC = list(set(listA).union(set(listB)))

#求差集，在B中但不在A中
retD = list(set(listB).difference(set(listA)))
retE = [i for i in listB if i not in listA]

itertools模块
>>> itertools.permutations('ABCD',2)
AB AC AD BA BC BD CA CB CD DA DB DC 数组全排列

>>> itertools.combinations('ABCD',2)
AB AC AD BC BD CD  数组的全部组合

string大小写转换
str = "www.runoob.com"
print(str.upper())          # 把所有字符中的小写字母转换成大写字母
print(str.lower())          # 把所有字符中的大写字母转换成小写字母
print(str.capitalize())     # 把第一个字母转化为大写字母，其余小写
print(str.title())          # 把每个单词的第一个字母转化为大写，其余小写

python的参数传递是传引用！！！
如果参数引用的对象本身是 不可变的，如数值、字符串、元组，则在函数中对形参的修改 不会影响 实参
如果参数引用的对象本身是 可变的，如列表、字典，则在函数中对形参的修改 会影响 实参

python全局变量、局部变量
1.函数内部的变量名如果第一次出现，且出现在=前面，即被视为定义一个局部变量，不管全局域中有没有用到
该变量名，函数中使用的将是局部变量
2.函数内部的变量名如果第一次出现，且出现在=后面，且该变量在全局域中已定义，则这里将引用全局变量，
如果该变量在全局域中没有定义，当然会出现“变量未定义”的错误。
即只要是*使用*变量，而该变量在全局域中有定义，而在局部没有定义，则会使用全局变量。
3.如果使用的变量在全局域中有定义，在局部域中也有定义，则默认会使用局部变量。
4.如果要在函数中给全局变量赋值，需要用global关键字声明。


计数器
count = collections.Counter()

计数值访问
count['key']  不存在的话返回0

计数器更新
count.update('key')  key值对应的value+1
count.subtract('key') key值对应的value-1

key的删除
用del count('key')

count.elements()
一个生成器，返回的是无序key

count.most_common(N)
返回一个TopN列表，如果不指定N，就返回所有元素

operator 包
operator模块是python中内置的操作符函数接口，
它定义了一些算术和比较内置操作的函数。operator模块是用c实现的，所以执行速度比python代码快。

import operator
a = operator.add
res = a(1,2)  #res的操作就是1+2